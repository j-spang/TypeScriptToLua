// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transformation (characterEscapeSequence) 1`] = `
"local quoteInDoubleQuotes = \\"\\\\' \\\\' \\\\'\\"
local quoteInTemplateString = \\"\\\\' \\\\' \\\\'\\"
local doubleQuoteInQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\"
local doubleQuoteInDoubleQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\"
local doubleQuoteInTemplateString = \\"\\\\\\" \\\\\\" \\\\\\"\\"
local backQuoteInQuotes = \\"\` \` \`\\"
local backQuoteInDoubleQuotes = \\"\` \` \`\\"
local backQuoteInTemplateString = \\"\` \` \`\\"
local escapedCharsInQuotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\' \`\\"
local escapedCharsInDoubleQUotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\'\\"
local escapedCharsInTemplateString = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\' \`\\"
local nonEmptyTemplateString = \\"Level 0: \\\\n\\\\t \\" .. \\"Level 1: \\\\n\\\\t\\\\t \\" .. \\"Level 3: \\\\n\\\\t\\\\t\\\\t \\" .. \\"Last level \\\\n --\\" .. \\" \\\\n --\\" .. \\" \\\\n --\\" .. \\" \\\\n --\\""
`;

exports[`Transformation (classExtension1) 1`] = `
"function MyClass.myFunction(self)
end"
`;

exports[`Transformation (classExtension2) 1`] = `
"function TestClass.myFunction(self)
end"
`;

exports[`Transformation (classExtension3) 1`] = `
"function RenamedTestClass.myFunction(self)
end
function RenamedMyClass.myFunction(self)
end"
`;

exports[`Transformation (classExtension4) 1`] = `
"MyClass.test = \\"test\\"
MyClass.testP = \\"testP\\"
function MyClass.myFunction(self)
end"
`;

exports[`Transformation (classPureAbstract) 1`] = `
"ClassB = {}
ClassB.name = \\"ClassB\\"
ClassB.__index = ClassB
ClassB.prototype = {}
ClassB.prototype.__index = ClassB.prototype
ClassB.prototype.constructor = ClassB
function ClassB.new(...)
    local self = setmetatable({}, ClassB.prototype)
    self:____constructor(...)
    return self
end
function ClassB.prototype.____constructor(self)
end"
`;

exports[`Transformation (exportStatement) 1`] = `
"local ____exports = {}
local xyz = 4
____exports.xyz = xyz
____exports.uwv = xyz
do
    local ____export = require(\\"xyz\\")
    for ____exportKey, ____exportValue in pairs(____export) do
        ____exports[____exportKey] = ____exportValue
    end
end
do
    local ____xyz = require(\\"xyz\\")
    local abc = ____xyz.abc
    local def = ____xyz.def
    ____exports.abc = abc
    ____exports.def = def
end
do
    local ____xyz = require(\\"xyz\\")
    local def = ____xyz.abc
    ____exports.def = def
end
return ____exports"
`;

exports[`Transformation (methodRestArguments) 1`] = `
"MyClass = {}
MyClass.name = \\"MyClass\\"
MyClass.__index = MyClass
MyClass.prototype = {}
MyClass.prototype.__index = MyClass.prototype
MyClass.prototype.constructor = MyClass
function MyClass.new(...)
    local self = setmetatable({}, MyClass.prototype)
    self:____constructor(...)
    return self
end
function MyClass.prototype.____constructor(self)
end
function MyClass.prototype.varargsFunction(self, a, ...)
end"
`;

exports[`Transformation (modulesChangedVariableExport) 1`] = `
"local ____exports = {}
____exports.foo = 1
return ____exports"
`;

exports[`Transformation (modulesClassExport) 1`] = `
"local ____exports = {}
____exports.TestClass = {}
local TestClass = ____exports.TestClass
TestClass.name = \\"TestClass\\"
TestClass.__index = TestClass
TestClass.prototype = {}
TestClass.prototype.__index = TestClass.prototype
TestClass.prototype.constructor = TestClass
function TestClass.new(...)
    local self = setmetatable({}, TestClass.prototype)
    self:____constructor(...)
    return self
end
function TestClass.prototype.____constructor(self)
end
return ____exports"
`;

exports[`Transformation (modulesClassWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestClass = {}
local TestClass = ____exports.TestClass
TestClass.name = \\"TestClass\\"
TestClass.__index = TestClass
TestClass.prototype = {}
TestClass.prototype.__index = TestClass.prototype
TestClass.prototype.constructor = TestClass
function TestClass.new(...)
    local self = setmetatable({}, TestClass.prototype)
    self:____constructor(...)
    return self
end
function TestClass.prototype.____constructor(self)
end
function TestClass.prototype.memberFunc(self)
end
return ____exports"
`;

exports[`Transformation (modulesFunctionExport) 1`] = `
"local ____exports = {}
function ____exports.publicFunc(self)
end
return ____exports"
`;

exports[`Transformation (modulesFunctionNoExport) 1`] = `
"function publicFunc(self)
end"
`;

exports[`Transformation (modulesImportAll) 1`] = `
"local Test = require(\\"test\\")
local ____ = Test"
`;

exports[`Transformation (modulesImportNamed) 1`] = `
"local ____test = require(\\"test\\")
local TestClass = ____test.TestClass
local ____ = TestClass"
`;

exports[`Transformation (modulesImportNamedSpecialChars) 1`] = `
"local ____kebab_2Dmodule = require(\\"kebab-module\\")
local TestClass1 = ____kebab_2Dmodule.TestClass1
local ____dollar_24module = require(\\"dollar$module\\")
local TestClass2 = ____dollar_24module.TestClass2
local ____singlequote_27module = require(\\"singlequote'module\\")
local TestClass3 = ____singlequote_27module.TestClass3
local ____hash_23module = require(\\"hash#module\\")
local TestClass4 = ____hash_23module.TestClass4
local ____space_20module = require(\\"space module\\")
local TestClass5 = ____space_20module.TestClass5
local ____ = TestClass1
local ____ = TestClass2
local ____ = TestClass3
local ____ = TestClass4
local ____ = TestClass5"
`;

exports[`Transformation (modulesImportRenamed) 1`] = `
"local ____test = require(\\"test\\")
local RenamedClass = ____test.TestClass
local ____ = RenamedClass"
`;

exports[`Transformation (modulesImportRenamedSpecialChars) 1`] = `
"local ____kebab_2Dmodule = require(\\"kebab-module\\")
local RenamedClass1 = ____kebab_2Dmodule.TestClass
local ____dollar_24module = require(\\"dollar$module\\")
local RenamedClass2 = ____dollar_24module.TestClass
local ____singlequote_27module = require(\\"singlequote'module\\")
local RenamedClass3 = ____singlequote_27module.TestClass
local ____hash_23module = require(\\"hash#module\\")
local RenamedClass4 = ____hash_23module.TestClass
local ____space_20module = require(\\"space module\\")
local RenamedClass5 = ____space_20module.TestClass
local ____ = RenamedClass1
local ____ = RenamedClass2
local ____ = RenamedClass3
local ____ = RenamedClass4
local ____ = RenamedClass5"
`;

exports[`Transformation (modulesImportWithoutFromClause) 1`] = `"require(\\"test\\")"`;

exports[`Transformation (modulesNamespaceExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
return ____exports"
`;

exports[`Transformation (modulesNamespaceNestedWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
local TestSpace = ____exports.TestSpace
do
    TestSpace.TestNestedSpace = {}
    local TestNestedSpace = TestSpace.TestNestedSpace
    do
        function TestNestedSpace.innerFunc(self)
        end
    end
end
return ____exports"
`;

exports[`Transformation (modulesNamespaceNoExport) 1`] = `"TestSpace = TestSpace or {}"`;

exports[`Transformation (modulesNamespaceWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
local TestSpace = ____exports.TestSpace
do
    function TestSpace.innerFunc(self)
    end
end
return ____exports"
`;

exports[`Transformation (modulesNamespaceWithMemberNoExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
do
    local function innerFunc(self)
    end
end
return ____exports"
`;

exports[`Transformation (modulesVariableExport) 1`] = `
"local ____exports = {}
____exports.foo = \\"bar\\"
return ____exports"
`;

exports[`Transformation (modulesVariableNoExport) 1`] = `"local foo = \\"bar\\""`;

exports[`Transformation (namespacePhantom) 1`] = `
"function nsMember(self)
end"
`;

exports[`Transformation (returnDefault) 1`] = `
"function myFunc(self)
    return
end"
`;

exports[`Transformation (unusedDefaultWithNamespaceImport) 1`] = `
"local x = require(\\"module\\")
local ____ = x"
`;
